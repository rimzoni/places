'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Tab = require('./Tab');

var _Tab2 = _interopRequireDefault(_Tab);

var _TabBar = require('./TabBar');

var _TabBar2 = _interopRequireDefault(_TabBar);

var _mdlUpgrade = require('../utils/mdlUpgrade');

var _mdlUpgrade2 = _interopRequireDefault(_mdlUpgrade);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tabs = (function (_React$Component) {
    _inherits(Tabs, _React$Component);

    function Tabs() {
        _classCallCheck(this, Tabs);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Tabs).apply(this, arguments));
    }

    _createClass(Tabs, [{
        key: 'render',
        value: function render() {
            var _props = this.props;
            var activeTab = _props.activeTab;
            var className = _props.className;
            var onChange = _props.onChange;
            var ripple = _props.ripple;
            var children = _props.children;

            var otherProps = _objectWithoutProperties(_props, ['activeTab', 'className', 'onChange', 'ripple', 'children']);

            var classes = (0, _classnames2.default)('mdl-tabs mdl-js-tabs', {
                'mdl-js-ripple-effect': ripple
            }, className);

            return _react2.default.createElement(
                'div',
                _extends({ className: classes }, otherProps),
                _react2.default.createElement(
                    _TabBar2.default,
                    { cssPrefix: 'mdl-tabs', activeTab: activeTab, onChange: onChange },
                    children
                ),
                _react2.default.createElement('div', { className: 'react-mdl-hack', id: 'undefined' })
            );
        }
    }]);

    return Tabs;
})(_react2.default.Component);

Tabs.propTypes = {
    activeTab: _react.PropTypes.number,
    children: _react.PropTypes.arrayOf(function (props, propName, componentName) {
        var prop = props[propName];
        if (prop.type !== _Tab2.default) {
            return new Error('`' + componentName + '` only accepts `Tab` as children.');
        }
    }),
    className: _react.PropTypes.string,
    onChange: _react.PropTypes.func,
    ripple: _react.PropTypes.bool
};
exports.default = (0, _mdlUpgrade2.default)(Tabs);