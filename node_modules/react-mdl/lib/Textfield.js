'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _mdlUpgrade = require('./utils/mdlUpgrade');

var _mdlUpgrade2 = _interopRequireDefault(_mdlUpgrade);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Textfield = (function (_React$Component) {
    _inherits(Textfield, _React$Component);

    function Textfield() {
        _classCallCheck(this, Textfield);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(Textfield).apply(this, arguments));
    }

    _createClass(Textfield, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            if (this.props.required !== prevProps.required || this.props.pattern !== prevProps.pattern || this.props.error !== prevProps.error) {
                (0, _reactDom.findDOMNode)(this).MaterialTextfield.checkValidity();
            }
            if (this.props.disabled !== prevProps.disabled) {
                (0, _reactDom.findDOMNode)(this).MaterialTextfield.checkDisabled();
            }
            if (this.props.value !== prevProps.value && this.refs.input !== document.activeElement) {
                (0, _reactDom.findDOMNode)(this).MaterialTextfield.change(this.props.value);
            }
            if (this.props.error && !this.props.pattern) {
                // At every re-render, mdl will set 'is-invalid' class according to the 'pattern' props validity
                // If we want to force the error display, we have to override mdl 'is-invalid' value.
                var elt = (0, _reactDom.findDOMNode)(this);
                elt.className = (0, _classnames2.default)(elt.className, 'is-invalid');
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props;
            var className = _props.className;
            var inputClassName = _props.inputClassName;
            var error = _props.error;
            var expandable = _props.expandable;
            var expandableIcon = _props.expandableIcon;
            var floatingLabel = _props.floatingLabel;
            var label = _props.label;
            var maxRows = _props.maxRows;
            var rows = _props.rows;
            var style = _props.style;

            var otherProps = _objectWithoutProperties(_props, ['className', 'inputClassName', 'error', 'expandable', 'expandableIcon', 'floatingLabel', 'label', 'maxRows', 'rows', 'style']);

            var hasRows = !!rows;
            var id = 'textfield-' + label.replace(/[^a-z0-9]/gi, '');
            var inputTag = hasRows || maxRows > 1 ? 'textarea' : 'input';

            var inputProps = _extends({
                className: (0, _classnames2.default)('mdl-textfield__input', inputClassName),
                id: id,
                key: id,
                rows: rows,
                ref: 'input'
            }, otherProps);

            var input = _react2.default.createElement(inputTag, inputProps);

            var inputAndLabelError = [input, _react2.default.createElement(
                'label',
                { key: 'label', className: 'mdl-textfield__label', htmlFor: id },
                label
            ), error ? _react2.default.createElement(
                'span',
                { key: 'error', className: 'mdl-textfield__error' },
                error
            ) : null];

            var containerClasses = (0, _classnames2.default)('mdl-textfield mdl-js-textfield', {
                'mdl-textfield--floating-label': floatingLabel,
                'mdl-textfield--expandable': expandable
            }, className);

            var field = expandable ? _react2.default.createElement('div', { className: 'mdl-textfield__expandable-holder' }, inputAndLabelError) : inputAndLabelError;

            return _react2.default.createElement(
                'div',
                { className: containerClasses, style: style },
                expandable ? _react2.default.createElement(
                    'label',
                    { className: 'mdl-button mdl-js-button mdl-button--icon', htmlFor: id },
                    _react2.default.createElement(
                        'i',
                        { className: 'material-icons' },
                        expandableIcon
                    )
                ) : null,
                field
            );
        }
    }]);

    return Textfield;
})(_react2.default.Component);

Textfield.propTypes = {
    className: _react.PropTypes.string,
    disabled: _react.PropTypes.bool,
    error: _react.PropTypes.string,
    expandable: _react.PropTypes.bool,
    expandableIcon: _react.PropTypes.string,
    floatingLabel: _react.PropTypes.bool,
    inputClassName: _react.PropTypes.string,
    label: _react.PropTypes.string.isRequired,
    maxRows: _react.PropTypes.number,
    onChange: _react.PropTypes.func,
    pattern: _react.PropTypes.string,
    required: _react.PropTypes.bool,
    rows: _react.PropTypes.number,
    style: _react.PropTypes.object,
    value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number])
};
exports.default = (0, _mdlUpgrade2.default)(Textfield);